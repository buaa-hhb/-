`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2023/03/06 10:42:51
// Design Name: 
// Module Name: axi_stream_insert_header
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
//

module axi_stream_insert_header#(
parameter DATA_WD = 32,
parameter DATA_BYTE_WD = DATA_WD / 8,
parameter BYTE_CNT_WD = $clog2(DATA_BYTE_WD)
    )(
input clk,
input rst_n,
// AXI Stream input original data
input valid_in,
input [DATA_WD-1 : 0] data_in,
input [DATA_BYTE_WD-1 : 0] keep_in,
input last_in,
output ready_in,
// AXI Stream output with header inserted
output valid_out,
output [DATA_WD-1 : 0] data_out,
output [DATA_BYTE_WD-1 : 0] keep_out,
output last_out,
input ready_out,
// The header to be inserted to AXI Stream input
input valid_insert,
input [DATA_WD-1 : 0] data_insert,
input [DATA_BYTE_WD-1 : 0] keep_insert,
input [BYTE_CNT_WD-1 : 0] byte_insert_cnt,
output ready_insert
    );
//-------检测last_in脉冲变化--------------//
wire last_in_pulse_d,last_in_pulse_u;
reg last_in_reg0,last_in_reg1;
always@(posedge clk or negedge rst_n)
begin
    if(!rst_n)
    begin
        last_in_reg0<=0;
        last_in_reg1<=0;
    end
    else    
    begin
        last_in_reg0<=last_in;
        last_in_reg1<=last_in_reg0;
    end
end
assign last_in_pulse_d=!last_in_reg0 &last_in_reg1;
assign last_in_pulse_u=last_in_reg0 &!last_in_reg1;

// input original data     //
reg [DATA_WD-1:0]axi_m2s_data;
reg [DATA_WD-1:0]axi_m2s_data_last;//缓存每个数据流的最后一个数据
wire axis_ready_in;
assign axis_ready_in=last_in_pulse_d ? 0:1;
assign ready_in =axis_ready_in;

always@(posedge clk or negedge rst_n)
begin
    if(!rst_n)
    begin
        axi_m2s_data <=0;
        axi_m2s_data_last<=0;
    end
    else if(valid_in && axis_ready_in)
    begin
        axi_m2s_data<=data_in;
        axi_m2s_data_last <= last_in_pulse_u ? data_in:axi_m2s_data_last;
    end
    else
    begin
        axi_m2s_data<=axi_m2s_data;
        axi_m2s_data_last<=axi_m2s_data_last;
    end  
end
   
//    header 数据处理                 //
reg [DATA_WD-1:0]data_insert_buffer;
reg insert_flag;
reg[DATA_BYTE_WD-1 : 0] keep_insert_buffer;
reg s_ready_insert;

always@(posedge clk or negedge rst_n)
begin
    if(!rst_n)
    begin
        data_insert_buffer<=0;
        insert_flag<=0;
    end
    else if(valid_insert && ready_insert)
    begin
        case(keep_insert)
        4'b1111:begin data_insert_buffer<=data_insert;insert_flag<=1;end
        4'b0111:begin data_insert_buffer<={8'b0,data_insert[23:0]};insert_flag<=1;end
        4'b0011:begin data_insert_buffer<={16'b0,data_insert[15:0]};insert_flag<=1;end
        4'b0001:begin data_insert_buffer<={24'b0,data_insert[7:0]};insert_flag<=1;end
        default:begin data_insert_buffer<=data_insert_buffer;insert_flag<=1;end
        endcase
        keep_insert_buffer<=keep_insert;
    end   
    else 
    begin
        data_insert_buffer <=data_insert_buffer;
        insert_flag<=insert_flag;
    end
end
always@(posedge clk or negedge rst_n)
begin
    if(!rst_n)
        s_ready_insert<=0;
    else
        s_ready_insert<= insert_flag==1  ? 0:1;
end
assign ready_insert=s_ready_insert;
// header数据插入到data  //
wire data_0_flag;//输出中每一个数据流第一个data_in的标志位
assign data_0_flag =mlast_out_u ? 1:0;
reg [DATA_WD-1:0]header_data;
integer h;
always@(posedge clk or negedge rst_n)
begin
    if(!rst_n)
    begin
        header_data<=0;
    end
    else  if(data_0_flag)
    begin
        if(insert_flag)
        begin
            case(keep_insert_buffer)
            4'b1111:begin header_data<=data_insert_buffer;insert_flag<=0;end
            4'b0111:begin header_data<={axi_m2s_data[31:24],data_insert_buffer[23:0]};insert_flag<=0;end
            4'b0011:begin header_data<={axi_m2s_data[31:16],data_insert_buffer[15:0]};insert_flag<=0;end
            4'b0001:begin header_data<={axi_m2s_data[31:8],data_insert_buffer[7:0]};insert_flag<=0;end
            endcase
        end
        else 
        begin
            header_data<=axi_m2s_data;
        end
    end
    else 
    begin
        header_data<=axi_m2s_data;
    end
end
//判断数据流的最后一位数据输出 //
wire mlast_out;
assign last_out =mlast_out;
reg last_send; 
always@(posedge clk or negedge rst_n)
begin
    if(!rst_n)
        last_send<=0;
    else if(last_in)
        last_send<=1;
    else if(header_data==axi_m2s_data_last && last_send && !last_in)
        last_send<=0;
    else
        last_send<=last_send;
end
// 取last_out的上升沿和下降沿//
assign mlast_out =  header_data==axi_m2s_data_last && last_send && !last_in ?1:0;
reg mlast_out_reg0,mlast_out_reg1;
always@(posedge clk or negedge rst_n)
begin
    if(!rst_n)
    begin
        mlast_out_reg0<=0;
        mlast_out_reg1<=0;
    end
    else    
    begin
        mlast_out_reg0<=mlast_out;
        mlast_out_reg1<=mlast_out_reg0;
    end
end
assign mlast_out_d=!mlast_out_reg0 &mlast_out_reg1;
assign mlast_out_u=mlast_out_reg0 &!mlast_out_reg1;   
assign keep_out ={(DATA_BYTE_WD){1'b1}}; 
assign valid_out =mlast_out_u ? 0:1;       
assign data_out =valid_out & ready_out ?  header_data:data_out; 
             
endmodule
